{"version":3,"sources":["component/Preloader.module.css","component/api/api.js","component/redux/tasksReducer.js","component/redux/action.js","component/redux/appReducer.js","component/TaskList/Items.js","component/Preloader.js","component/TaskList/TaskList.js","component/NewTask.js","App.js","serviceWorker.js","component/redux/store.js","index.js","component/TaskList/Items.module.css","App.module.css","component/NewTask.module.css"],"names":["module","exports","api","getTask","fetch","then","response","json","catch","e","Error","initialState","tasks","newTaskText","formError","errorInNewTaskInput","payload","type","appReducer","state","action","map","id","completed","newTask","title","length","isFetching","loadingError","Items","props","className","style","slow_appearance","reverse","i","arr","item_container","key","onClick","toggleComplete","checked","Preloader","loader","loaderInercircle","connect","app","dispatch","message","useEffect","addTask","timeOut","trim","clearTimeout","setTimeout","changeNewTask","changeNewTextTask","submitHandler","preventDefault","container","onSubmit","input_field","palaceholder","onChange","currentTarget","value","error","App","new_task_container","Boolean","window","location","hostname","match","combineReducer","combineReducers","tasksReducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,OAAS,0BAA0B,KAAO,wBAAwB,iBAAmB,sC,0KCUxFC,EARH,CACRC,QAAS,WACL,OAAOC,MAAM,8CACZC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BC,OAAO,SAAAC,GAAC,OAAI,IAAIC,MAAM,c,OCHzBC,EAAe,CACjBC,MAAO,GACPC,YAAa,GACbC,WAAW,GA8CFC,EAAsB,SAACC,GAAD,MAAc,CAC7CC,KC/CmC,0BDgDnCD,YA+BWE,EA5EI,WAAmC,IAAlCC,EAAiC,uDAAzBR,EAAcS,EAAW,uCACjD,OAAQA,EAAOH,MACX,ICViB,YDWb,OAAO,2BAAIE,GAAX,IAAkBP,MAAM,YAAKQ,EAAOJ,WACxC,ICXsB,iBDYlB,OAAO,2BAAIG,GAAX,IAAkBP,MAAOO,EAAMP,MAAMS,KAAI,SAAAZ,GAAC,OACtCA,EAAEa,KAAOF,EAAOJ,QAAhB,2BAA8BP,GAA9B,IAAiCc,WAAYd,EAAEc,YAAad,OAEpE,ICdoB,eDehB,IAAIe,EAAU,CACVC,MAAON,EAAMN,YACbS,GAAIH,EAAMP,MAAMc,OAAO,EACvBH,WAAW,GAEf,OAAO,2BAAIJ,GAAX,IACIP,MAAM,GAAD,mBAAMO,EAAMP,OAAZ,CAAmBY,IACxBX,YAAa,KAErB,ICvB4B,uBDwBpB,OAAO,2BAAIM,GAAX,IAAkBN,YAAaO,EAAOJ,UAC9C,ICvB+B,0BDwBvB,OAAO,2BAAIG,GAAX,IAAkBL,UAAWM,EAAOJ,UAC5C,QAAS,OAAOG,IE3BlBR,EAAe,CACjBgB,YAAY,EACZC,cAAc,GAwBLA,EAAe,SAACZ,GAAD,MAAc,CACtCC,KD1ByB,gBC2BzBD,YAsBWE,EA7CI,WAAmC,IAAlCC,EAAiC,uDAAzBR,EAAcS,EAAW,uCACjD,OAAQA,EAAOH,MACX,IDZ4B,uBCaxB,OAAO,2BAAIE,GAAX,IAAkBQ,YAAY,IAClC,IDb0B,qBCctB,OAAO,2BAAIR,GAAX,IAAkBQ,YAAY,IAClC,IDVqB,gBCWjB,OAAO,2BAAIR,GAAX,IAAkBS,aAAcR,EAAOJ,UAC3C,QAAS,OAAOG,I,gBCQTU,EAtBD,SAACC,GAEX,OACI,yBAAKC,UAAWC,IAAMC,iBACjB,YAAKH,EAAMlB,OAAQsB,UAAUb,KAAK,SAACZ,EAAE0B,EAAEC,GACpC,OAEI,yBAAKL,UAAWC,IAAMK,eAAiB,KAAO5B,EAAEc,WAAaS,IAAMT,WAC7D,KAAOd,EAAEa,KAAOc,EAAIV,OAASM,IAAMC,gBAAkB,IACzDK,IAAK7B,EAAEa,IACL,6BAAOb,EAAEgB,OACT,6BAAK,2BAAOR,KAAK,WAAWsB,QAAS,kBAAMT,EAAMU,eAAe/B,EAAEa,KAAKmB,QAAShC,EAAEc,mB,iBCN3FmB,EANG,WACd,OACI,yBAAKX,UAAWC,IAAMW,QAAQ,yBAAKZ,UAAWC,IAAMY,qBCsC7CC,eAPS,SAAC1B,GAAD,MAAY,CAChCQ,WAAYR,EAAM2B,IAAInB,WACtBC,aAAcT,EAAM2B,IAAIlB,aACxBhB,MAAOO,EAAMP,MAAMA,SAIgB,CAACT,QHNjB,WACnB,OAAO,SAAC4C,GACJA,EAhB4B,CAChC9B,KDxBgC,yBCwC5Bf,EAAIC,UAAUE,MAAO,SAACC,GACVA,EAAS0C,SAAgC,UAArB1C,EAAS0C,SAC7BD,EAfiB,CACjC9B,KD3B8B,uBC0Cd8B,EAASnB,GAAa,MAEtBmB,EFRkB,CAClC9B,KCpCqB,YDqCrBD,QEMkCV,IAClByC,EAnBiB,CACjC9B,KD3B8B,uBC8Cd8B,EAASnB,GAAa,UGJMY,eLiBlB,SAAC/B,GAC3B,OAAO,SAACsC,GACJA,EArBmC,CACvC9B,KCvC0B,iBDwC1BD,QAmB2BP,OKnBhBoC,EApCE,SAACf,GAMd,OAJAmB,qBAAU,WACNnB,EAAM3B,YACR,IAGE,8BAEM2B,EAAMH,YAAcG,EAAMF,aAC5B,yBAAKG,UAAU,gBACf,6BAAK,kDACL,4BAAQQ,QAAST,EAAM3B,SAAvB,cAGA2B,EAAMH,aAAeG,EAAMF,aAC3B,kBAAC,EAAD,MAEsB,GAAtBE,EAAMlB,MAAMc,OACR,qDACF,6BACE,kBAAC,EAAD,CAAOd,MAAOkB,EAAMlB,MAChB4B,eAAkBV,EAAMU,sB,gBCO7BK,eALS,SAAC1B,GAAD,MAAY,CAChCN,YAAaM,EAAMP,MAAMC,YACzBC,UAAWK,EAAMP,MAAME,aAGY,CAACoC,QN8BjB,SAAClC,GAAD,OAAa,SAAC+B,GACjC,IAAII,EACmB,KAAnBnC,EAAQoC,QACRC,aAAaF,GACbJ,EAAShC,GAAoB,IAC7BoC,EAAUG,YAAW,kBAAKP,EAAShC,GAAoB,MAAS,OAEhEsC,aAAaF,GACbJ,EA7BgC,CACpC9B,KC1CwB,iBDuEpB8B,EAAShC,GAAoB,OMvCYwC,cN2CpB,SAACvC,GAC1B,OAAO,SAAC+B,GACJA,EAhCyB,SAAC/B,GAAD,MAAc,CAC3CC,KC7CgC,uBD8ChCD,WA8BawC,CAAkBxC,OM7CpB6B,EA/BC,SAACf,GAGb,IAAM2B,EAAgB,SAAChD,GACnBA,EAAEiD,iBACF5B,EAAMoB,QAAQpB,EAAMjB,cAGxB,OACI,yBAAKkB,UAAWC,IAAM2B,WAClB,0BAAMC,SAAUH,EAAe1B,UAAYC,IAAM6B,aAC7C,6BAAK,2BAAQ5C,KAAK,OAAO6C,aAAa,kBAClCC,SAAU,SAACtD,GAAKqB,EAAMyB,cAAc9C,EAAEuD,cAAcC,QACpDA,MAAQnC,EAAMjB,YACdkB,UAAWD,EAAMhB,WAAakB,IAAMkC,QAGxC,4BAAQjD,KAAK,SAASsB,QAAWkB,GAAjC,QAEE3B,EAAMhB,UAAiB,+DAAL,QCFrBqD,EAhBF,WACX,OACE,yBAAKpC,UAAWC,IAAM2B,WACpB,wBAAI5B,UAAWC,IAAMP,OAArB,cACA,6BACE,yBAAKM,UAAWC,IAAMoC,oBACpB,kBAAC,EAAD,OAEF,6BACE,kBAAC,EAAD,UCHUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCZAC,EAAiBC,YAAgB,CACnC7B,IAAK5B,EACLN,MAAOgE,IAILC,EAAQC,YAAYJ,EAAgBK,YAAgBC,MAEtDV,OAAOO,MAAQA,EAEJA,QCNfI,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,QAGJO,SAASC,eAAe,SFmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnF,MAAK,SAAAoF,GACJA,EAAaC,gBAEdlF,OAAM,SAAA0D,GACLyB,QAAQzB,MAAMA,EAAMlB,a,kBGxI5BhD,EAAOC,QAAU,CAAC,eAAiB,8BAA8B,UAAY,yBAAyB,gBAAkB,+BAA+B,MAAQ,uB,kBCA/JD,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,mBAAmB,mBAAqB,kC,kBCArGD,EAAOC,QAAU,CAAC,UAAY,2BAA2B,YAAc,6BAA6B,MAAQ,0B","file":"static/js/main.8505f27b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Preloader_loader__16j2X\",\"spin\":\"Preloader_spin__2-gvn\",\"loaderInercircle\":\"Preloader_loaderInercircle__xmLnY\"};","const BASEURL = 'https://jsonplaceholder.typicode.com/users/1/'\r\n\r\n\r\nconst api = {\r\n    getTask: () => {\r\n        return fetch('https://jsonplaceholder.typicode.com/todos')\r\n        .then( response => response.json())\r\n        .catch( e => new Error('error'))\r\n    }\r\n}\r\n\r\nexport default api","import { SET_TASKS, TASK_COMPLETED, ADD_NEW_TASK, CHANGE_NEW_TASK_TEXT, ERROR_IN_NEW_TASK_INPUT } from \"./action\";\r\n\r\n\r\n\r\nconst initialState = {\r\n    tasks: [],\r\n    newTaskText: '',\r\n    formError: false\r\n};\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n    switch (action.type){\r\n        case SET_TASKS: \r\n            return {...state, tasks: [...action.payload]}\r\n        case TASK_COMPLETED: \r\n            return {...state, tasks: state.tasks.map(e => \r\n                e.id === action.payload ? {...e, completed: !e.completed} : e\r\n            )}\r\n        case ADD_NEW_TASK: \r\n            let newTask = {\r\n                title: state.newTaskText,\r\n                id: state.tasks.length+1,\r\n                completed: false\r\n                }\r\n            return {...state, \r\n                tasks: [...state.tasks, newTask],\r\n                newTaskText: ''\r\n            }\r\n        case CHANGE_NEW_TASK_TEXT: \r\n                return {...state, newTaskText: action.payload}\r\n        case ERROR_IN_NEW_TASK_INPUT:\r\n                return {...state, formError: action.payload}\r\n        default: return state\r\n    }\r\n        \r\n}\r\n\r\nexport const setTasks = (payload) => ({\r\n    type: SET_TASKS,\r\n    payload\r\n})\r\nexport const taskCompleted = (payload) => ({\r\n    type: TASK_COMPLETED,\r\n    payload\r\n})\r\nexport const addNewTask = (payload) => ({\r\n    type: ADD_NEW_TASK,\r\n})\r\n\r\nexport const changeNewTextTask = (payload) => ({\r\n    type: CHANGE_NEW_TASK_TEXT,\r\n    payload\r\n})\r\nexport const errorInNewTaskInput = (payload) => ({\r\n    type: ERROR_IN_NEW_TASK_INPUT,\r\n    payload\r\n})\r\n\r\n\r\n\r\nexport const toggleComplete = (e)=> {\r\n    return (dispatch) => {\r\n        dispatch(taskCompleted(e))\r\n    }\r\n};\r\n\r\nexport const addTask = (payload) => (dispatch) => {\r\n    let timeOut;\r\n    if (payload.trim() === \"\") {\r\n        clearTimeout(timeOut);\r\n        dispatch(errorInNewTaskInput(true));\r\n        timeOut = setTimeout(()=> dispatch(errorInNewTaskInput(false)), 5000 )\r\n    } else {\r\n        clearTimeout(timeOut);\r\n        dispatch(addNewTask());\r\n        dispatch(errorInNewTaskInput(false));\r\n    }\r\n}\r\n\r\nexport const changeNewTask = (payload) => {\r\n    return (dispatch) => {\r\n        dispatch(changeNewTextTask(payload))\r\n    }\r\n}\r\n\r\n\r\nexport default appReducer","export const FETCHING_IN_PROGRESS = 'FETCHING_IN_PROGRESS'\r\nexport const FETCHING_IS_FINISH = 'FETCHING_IS_FINISH'\r\nexport const SET_TASKS = 'SET_TASKS'\r\nexport const TASK_COMPLETED = 'TASK_COMPLETED'\r\nexport const ADD_NEW_TASK = 'ADD_NEW_TASK'\r\nexport const CHANGE_NEW_TASK_TEXT = 'CHANGE_NEW_TASK_TEXT'\r\nexport const LOADING_ERROR = 'LOADING_ERROR'\r\nexport const ERROR_IN_NEW_TASK_INPUT = 'ERROR_IN_NEW_TASK_INPUT'","import { FETCHING_IN_PROGRESS, FETCHING_IS_FINISH, LOADING_ERROR } from \"./action\";\r\nimport api from '../api/api'\r\nimport { setTasks } from \"./tasksReducer\";\r\n\r\n\r\nconst initialState = {\r\n    isFetching: false,\r\n    loadingError: false,\r\n};\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n    switch (action.type){\r\n        case FETCHING_IN_PROGRESS: \r\n            return {...state, isFetching: true}\r\n        case FETCHING_IS_FINISH: \r\n            return {...state, isFetching: false}\r\n        case LOADING_ERROR: \r\n            return {...state, loadingError: action.payload}\r\n        default: return state\r\n    }\r\n        \r\n}\r\n\r\nexport const startFetching = () => ({\r\n    type: FETCHING_IN_PROGRESS\r\n})\r\n\r\nexport const finishFetching = () => ({\r\n    type: FETCHING_IS_FINISH\r\n})\r\n\r\nexport const loadingError = (payload) => ({\r\n    type: LOADING_ERROR,\r\n    payload\r\n})\r\n\r\n\r\nexport const getTask = () => {\r\n    return (dispatch) =>  { \r\n        dispatch(startFetching())\r\n        api.getTask().then ( (response) => {\r\n                if (response.message && response.message === 'error') {\r\n                    dispatch(finishFetching());\r\n                    dispatch(loadingError(true))\r\n                } else {\r\n                    dispatch(setTasks(response));\r\n                    dispatch(finishFetching());\r\n                    dispatch(loadingError(false))\r\n                }\r\n            }  \r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default appReducer","import React, { useEffect } from 'react';\r\nimport style from './Items.module.css'\r\n\r\n\r\nconst Items = (props) => {\r\n\r\n    return (\r\n        <div className={style.slow_appearance}>\r\n           { ([...props.tasks]).reverse().map( (e,i,arr) => {\r\n                return (\r\n                    \r\n                    <div className={style.item_container + \" \" + (e.completed && style.completed)\r\n                        + \" \" + (e.id === arr.length ? style.slow_appearance : \"\")\r\n                    } key={e.id}>\r\n                        <div >{e.title}</div>\r\n                        <div><input type='checkbox' onClick={() => props.toggleComplete(e.id)} checked={e.completed}/></div>\r\n                    </div>\r\n                )\r\n                }\r\n            )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Items\r\n\r\n","import React from 'react'\r\nimport style from \"./Preloader.module.css\"\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div className={style.loader}><div className={style.loaderInercircle}></div></div>\r\n    )\r\n}\r\n\r\nexport default Preloader","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {getTask} from '../redux/appReducer'\r\nimport {toggleComplete} from '../redux/tasksReducer'\r\nimport Items from './Items'\r\nimport Preloader from '../Preloader';\r\n\r\nconst TaskList = (props)=> {\r\n\r\n    useEffect(()=>{\r\n        props.getTask()\r\n    },[]);\r\n\r\n    return (\r\n        <div>\r\n            \r\n            {!props.isFetching && props.loadingError ? \r\n            <div className=\"center_block\">\r\n            <div><p>Something wrong...</p></div>\r\n            <button onClick={props.getTask}>Try again</button>\r\n            </div> \r\n            :            \r\n            props.isFetching && !props.loadingError ?\r\n            <Preloader />\r\n            :\r\n            props.tasks.length == 0 ?\r\n                <div>You don't have tasks</div>\r\n            : <div>\r\n                <Items tasks={props.tasks}\r\n                    toggleComplete = {props.toggleComplete}/>\r\n            </div>\r\n             }   \r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isFetching: state.app.isFetching,\r\n    loadingError: state.app.loadingError,\r\n    tasks: state.tasks.tasks\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps,{getTask,toggleComplete})(TaskList)\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {addTask, changeNewTask} from '../component/redux/tasksReducer'\r\nimport style from './NewTask.module.css'\r\n\r\nconst NewTask = (props) => {\r\n\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        props.addTask(props.newTaskText)\r\n    }\r\n\r\n    return (\r\n        <div className={style.container}>\r\n            <form onSubmit={submitHandler} className ={style.input_field}>\r\n                <div><input  type='text' palaceholder='Input your task' \r\n                    onChange={(e)=>{props.changeNewTask(e.currentTarget.value)}}\r\n                    value ={props.newTaskText}\r\n                    className={props.formError && style.error}\r\n                    >\r\n                </input>\r\n                <button type='submit' onClick = {submitHandler}>ADD</button>\r\n                </div>\r\n                {!props.formError ? \"\" : <span>Please enter not empy task...</span>}\r\n                \r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    newTaskText: state.tasks.newTaskText,\r\n    formError: state.tasks.formError\r\n})\r\n\r\nexport default connect(mapStateToProps,{addTask, changeNewTask})(NewTask)","import React from 'react';\r\nimport style from './App.module.css'\r\nimport TaskList from './component/TaskList/TaskList';\r\nimport NewTask from './component/NewTask';\r\n\r\n\r\nconst  App = () => {\r\n  return (\r\n    <div className={style.container}>\r\n      <h1 className={style.title}>To do list</h1>\r\n      <div>\r\n        <div className={style.new_task_container}>\r\n          <NewTask />\r\n        </div>\r\n        <div>\r\n          <TaskList />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import  { combineReducers, createStore, applyMiddleware } from 'redux'\r\nimport appReducer from './appReducer'\r\nimport tasksReducer from './tasksReducer'\r\nimport thunk from 'redux-thunk';\r\n\r\n\r\nconst combineReducer = combineReducers({\r\n    app: appReducer,\r\n    tasks: tasksReducer\r\n\r\n})\r\n\r\nconst store = createStore(combineReducer, applyMiddleware(thunk));\r\n\r\n    window.store = store;\r\n\r\nexport default store ","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport store from './component/redux/store';\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item_container\":\"Items_item_container__npPUE\",\"completed\":\"Items_completed__uPWYW\",\"slow_appearance\":\"Items_slow_appearance__2WnNK\",\"appea\":\"Items_appea__3D1RM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__24DJb\",\"title\":\"App_title__3ZLPo\",\"new_task_container\":\"App_new_task_container__3vs1z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"NewTask_container__1lVRD\",\"input_field\":\"NewTask_input_field__3ThHQ\",\"error\":\"NewTask_error__US53Q\"};"],"sourceRoot":""}